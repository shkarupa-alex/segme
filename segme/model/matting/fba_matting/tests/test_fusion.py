import numpy as np
import tensorflow as tf
from tf_keras.src.testing_infra import test_combinations
from segme.model.matting.fba_matting.fusion import Fusion
from segme.testing_utils import layer_multi_io_test


@test_combinations.run_all_keras_modes
class TestFusion(test_combinations.TestCase):
    # def test_layer(self):
    #     layer_multi_io_test(
    #         Fusion,
    #         kwargs={},
    #         input_shapes=[(2, 128, 128, 3), (2, 128, 128, 7)],
    #         input_dtypes=['float32'] * 2,
    #         expected_output_shapes=[(None, 128, 128, 7), (None, 128, 128, 1), (None, 128, 128, 3), (None, 128, 128, 3)],
    #         expected_output_dtypes=['float32'] * 4
    #     )

    def test_value(self):
        source_alpha = np.array([
            [0.11649738, 0.34115862, 0.19901514, 0.44254727, 0.45125985, 0.2719126, 0.41972925, 0.08259951],
            [0.31859556, 0.58595064, 0.8502705, 0.53112322, 0.21173297, 0.32449187, 0.69178452, 0.41772451],
            [0.41550831, 0.93873406, 0.56715244, 0.31370676, 0.60112384, 0.17276844, 0.75918609, 0.41935488],
            [0.51629702, 0.4762876, 0.30891746, 0.04081906, 0.67440964, 0.22038393, 0.18573692, 0.54769703],
            [0.24767802, 0.09670356, 0.29982668, 0.977317, 0.37386934, 0.22803611, 0.23364739, 0.49589258],
            [0.12647578, 0.60022568, 0.94870173, 0.19177922, 0.4797057, 0.97408934, 0.52970402, 0.26436536],
            [0.63480539, 0.34611172, 0.38532207, 0.4926412, 0.58006, 0.02679589, 0.46170613, 0.35559601],
            [0.71240281, 0.32688286, 0.22205559, 0.8980536, 0.31020264, 0.31515843, 0.42277988, 0.65471292]
        ], 'float32')[None, ..., None]
        source_image = np.array([
            [[21, 180, 6], [60, 59, 26], [121, 8, 182], [164, 172, 244],
             [32, 218, 166], [218, 155, 154], [254, 16, 155], [58, 195, 48]],
            [[74, 113, 33], [162, 28, 98], [188, 28, 69], [67, 133, 200],
             [62, 126, 116], [21, 57, 227], [69, 49, 119], [111, 39, 243]],
            [[250, 25, 253], [80, 232, 227], [159, 36, 65], [114, 173, 208],
             [68, 242, 196], [122, 109, 183], [110, 30, 253], [148, 143, 247]],
            [[183, 152, 69], [189, 176, 245], [74, 193, 164], [70, 78, 147],
             [12, 120, 77], [251, 184, 63], [186, 181, 57], [106, 5, 83]],
            [[105, 114, 236], [196, 217, 183], [106, 12, 160], [45, 134, 206],
             [87, 12, 16], [24, 36, 26], [226, 131, 55], [44, 52, 4]],
            [[40, 99, 92], [88, 38, 208], [65, 180, 106], [203, 223, 72],
             [145, 55, 152], [64, 201, 19], [134, 80, 178], [171, 222, 141]],
            [[191, 27, 146], [232, 99, 122], [6, 128, 57], [35, 88, 91],
             [126, 200, 104], [211, 161, 245], [220, 29, 243], [12, 120, 229]],
            [[60, 142, 237], [151, 250, 220], [149, 112, 134], [227, 0, 82],
             [215, 58, 227], [17, 136, 133], [117, 74, 102], [71, 193, 56]]
        ], 'float32')[None, ...] / 255.
        source_foreground = np.array([
            [[223, 26, 115], [196, 209, 25], [10, 28, 173], [59, 227, 225],
             [227, 88, 196], [113, 226, 128], [231, 211, 196], [7, 81, 8]],
            [[58, 15, 181], [13, 233, 140], [94, 173, 13], [144, 182, 10],
             [112, 201, 78], [78, 3, 145], [129, 179, 143], [145, 117, 235]],
            [[21, 17, 226], [154, 178, 42], [100, 80, 57], [151, 47, 78],
             [204, 32, 238], [114, 143, 172], [101, 209, 190], [220, 16, 171]],
            [[251, 224, 210], [64, 74, 252], [253, 135, 150], [219, 59, 114],
             [138, 193, 148], [140, 225, 151], [202, 142, 220], [3, 122, 113]],
            [[254, 142, 17], [224, 69, 10], [123, 90, 198], [123, 27, 229],
             [68, 57, 67], [201, 179, 113], [87, 127, 39], [60, 251, 186]],
            [[15, 199, 96], [72, 154, 26], [32, 216, 133], [75, 54, 179],
             [96, 196, 144], [161, 240, 74], [228, 153, 198], [247, 132, 120]],
            [[208, 118, 165], [214, 182, 31], [236, 107, 105], [42, 71, 241],
             [153, 109, 244], [100, 178, 155], [20, 42, 145], [80, 146, 127]],
            [[200, 225, 174], [232, 104, 92], [79, 31, 72], [88, 143, 10],
             [150, 123, 98], [173, 78, 205], [169, 3, 120], [71, 184, 178]]
        ], 'float32')[None, ...] / 255.
        source_background = np.array([
            [[184, 98, 81], [45, 148, 178], [123, 182, 153], [146, 26, 70],
             [70, 43, 36], [44, 13, 240], [147, 61, 132], [32, 44, 192]],
            [[159, 191, 126], [220, 83, 216], [53, 2, 156], [25, 113, 122],
             [183, 77, 139], [93, 161, 4], [229, 136, 98], [123, 201, 86]],
            [[19, 222, 64], [243, 73, 144], [189, 219, 162], [217, 78, 126],
             [198, 50, 81], [217, 34, 30], [69, 231, 58], [39, 30, 219]],
            [[14, 185, 101], [148, 95, 42], [4, 236, 160], [3, 57, 10],
             [22, 226, 42], [187, 117, 166], [98, 244, 245], [72, 252, 209]],
            [[188, 149, 239], [205, 181, 201], [80, 17, 4], [152, 5, 180],
             [204, 81, 111], [88, 28, 143], [252, 109, 77], [82, 135, 115]],
            [[252, 174, 218], [163, 43, 248], [234, 63, 180], [216, 158, 101],
             [206, 43, 51], [198, 242, 171], [192, 48, 143], [66, 141, 186]],
            [[3, 126, 122], [83, 154, 207], [142, 182, 151], [149, 61, 117],
             [206, 117, 55], [187, 92, 150], [133, 233, 54], [85, 99, 39]],
            [[119, 225, 100], [75, 180, 224], [167, 102, 247], [239, 169, 68],
             [165, 30, 26], [132, 141, 203], [40, 2, 216], [120, 76, 88]]
        ], 'float32')[None, ...] / 255.
        # Without sigmoid/clip
        # expect_foreground = np.array([
        #     [[0.7979672, 0.14325468, 0.41490692], [0.71977496, 0.6726946, 0.],
        #      [0.05520613, 0., 0.697958], [0.32942992, 0.98920166, 1.],
        #      [0.69757396, 0.61885047, 0.8709102], [0.6086713, 0.97593385, 0.44273096],
        #      [1., 0.6497501, 0.7622695], [0.03654178, 0.36556894, 0.]],
        #     [[0.16145566, 0.03142782, 0.5717174], [0.19641516, 0.5853804, 0.3802021],
        #      [0.70253, 0.2803172, 0.16631272], [0.5205422, 0.6790515, 0.3255761],
        #      [0.35122862, 0.80712116, 0.2975091], [0.22045493, 0., 0.79417694],
        #      [0.2594944, 0.38524085, 0.533302], [0.5339155, 0.25092587, 1.]],
        #     [[0.4574005, 0., 1.], [0.31143168, 0.92051154, 0.82274324],
        #      [0.43769938, 0.08204748, 0.1402381], [0.4909153, 0.31314868, 0.4252852],
        #      [0.48504233, 0.6036082, 0.9819502], [0.39475074, 0.5988396, 0.7615492],
        #      [0.44581568, 0.27091607, 1.], [0.91717374, 0.25823188, 0.74973786]],
        #     [[1., 0.77084804, 0.6447967], [0.402287, 0.46016917, 1.],
        #      [0.9837731, 0.5151175, 0.59682345], [0.8681372, 0.23472106, 0.46830952],
        #      [0.30782676, 0.53538007, 0.4838923], [0.61328363, 0.91968733, 0.50599605],
        #      [0.8421844, 0.5247741, 0.72919184], [0.16595986, 0.10084394, 0.28544116]],
        #     [[0.8995843, 0.52455175, 0.11715853], [0.8743215, 0.28834787, 0.03939407],
        #      [0.49776456, 0.3213273, 0.8915025], [0.18088782, 0.5178848, 0.8141489],
        #      [0.16967505, 0.13552037, 0.14757906], [0.70795935, 0.67832243, 0.3446266],
        #      [0.3526773, 0.51434356, 0.14091851], [0.18261212, 0.71104085, 0.44508374]],
        #     [[0., 0.7416252, 0.32162973], [0.23438324, 0.43532866, 0.32145536],
        #      [0.2097117, 0.74232453, 0.41214794], [0.30467746, 0.2756498, 0.6689005],
        #      [0.36098385, 0.65313125, 0.6707818], [0.25717443, 0.7920001, 0.07049754],
        #      [0.7340238, 0.5509371, 0.7886564], [1., 0.6040886, 0.4420244]],
        #     [[0.95973706, 0.22893369, 0.63885206], [0.97991264, 0.6259202, 0.08887896],
        #      [0.6652538, 0.38167882, 0.29650778], [0.04630317, 0.32107595, 0.7768514],
        #      [0.4879533, 0.62681067, 0.8189419], [0.3949238, 0.7050477, 0.6178119],
        #      [0.33041936, 0., 0.83475983], [0.2144068, 0.5785272, 0.71935594]],
        #     [[0.4582718, 0.6504729, 0.9178152], [0.9414403, 0.5294219, 0.4109686],
        #      [0.31114575, 0.14400578, 0.21779114], [0.78041136, 0.04783509, 0.2719599],
        #      [0.65471965, 0.48132035, 0.6016568], [0.52033126, 0.32424188, 0.7166285],
        #      [0.6999852, 0.13043691, 0.34887218], [0.23499167, 0.8404209, 0.46459132]]
        # ], 'float32')[None, ...]
        # expect_background = np.array([
        #     [[0.14895654, 0.69323164, 0.04778281], [0.09310776, 0.32969683, 0.4701918],
        #      [0.5441614, 0.28127554, 0.67547715], [0.6718759, 0.20224822, 0.45980665],
        #      [0.08797576, 0.43372762, 0.24022649], [0.5830198, 0.27330646, 0.7943058],
        #      [0.71096516, 0.0368266, 0.51040584], [0.2257693, 0.7011675, 0.29271942]],
        #     [[0.49670732, 0.69637376, 0.22875911], [0.9302291, 0.17313282, 0.7687248],
        #      [0.2241328, 0., 0.61739135], [0.07004951, 0.4211619, 0.6599183],
        #      [0.40476263, 0.36911938, 0.51532257], [0.20559356, 0.5063955, 0.43578205],
        #      [0.84079874, 0.45975357, 0.3779291], [0.4424101, 0.5490093, 0.5158746]],
        #     [[0.5110013, 0.6585318, 0.48174834], [0.95067376, 0.28799912, 0.569807],
        #      [0.76475394, 0.7388829, 0.59217393], [0.65129185, 0.55999583, 0.7296273],
        #      [0.6429989, 0.39869365, 0.3382498], [0.6080002, 0.31010678, 0.52195984],
        #      [0.2772718, 0.8321505, 0.26537248], [0.21505064, 0.34072062, 0.9491426]],
        #     [[0.11978596, 0.651566, 0.27326494], [0.70902306, 0.51704895, 0.3282247],
        #      [0., 0.8965641, 0.6448301], [0.2302554, 0.30208263, 0.5377402],
        #      [0.02485754, 0.8279809, 0.13930741], [0.949628, 0.5844805, 0.3609871],
        #      [0.5960666, 0.82104045, 0.39549062], [0.37149346, 0.7699512, 0.72844344]],
        #     [[0.46213406, 0.49218953, 1.], [0.765891, 0.87414324, 0.789886],
        #      [0.34648028, 0., 0.26016694], [0.59576464, 0.02003673, 0.70579505],
        #      [0.66027, 0.19085771, 0.26938128], [0.08747371, 0.03394289, 0.24464059],
        #      [1., 0.47800905, 0.26467973], [0.28118354, 0.31992555, 0.23301947]],
        #     [[0.3746666, 0.41888565, 0.48219395], [0.6187765, 0.0967925, 1.],
        #      [0.9181023, 0.24649271, 0.7052909], [0.88992447, 0.8789384, 0.26187575],
        #      [0.7949114, 0.07218549, 0.28857583], [0.77596146, 0.9488166, 0.6702893],
        #      [0.6506846, 0.15689741, 0.5685678], [0.4121694, 0.77666646, 0.65548396]],
        #     [[0.06124015, 0.41381314, 0.4756127], [0.5594583, 0.45790815, 0.75740427],
        #      [0.20336221, 0.6622033, 0.4355939], [0.49196807, 0.2724754, 0.3276031],
        #      [0.7540193, 0.55458987, 0.14943333], [0.833754, 0.6151443, 0.9500303],
        #      [0.7527288, 0.721363, 0.45590025], [0.17610861, 0.39769894, 0.5032928]],
        #     [[0.40184456, 0.8362516, 0.4389703], [0.35230225, 0.9294863, 0.97072875],
        #      [0.65937114, 0.47472987, 0.753596], [0.9468169, 0.6514777, 0.27177912],
        #      [0.780674, 0.11557182, 0.53875995], [0.20821765, 0.588874, 0.62523067],
        #      [0.19861856, 0.1409055, 0.71058345], [0.45749882, 0.3338521, 0.27475476]]
        # ], 'float32')[None, ...]
        # expect_alpha = np.array([
        #     [0., 0.31587812, 0.29880562, 0.6152664, 0.44820774, 0.4682154, 0.26468664, 0.0514874],
        #     [0.3048684, 0.41512993, 0.84744984, 0.25813457, 0.28564796, 0.69411784, 0.9289222, 0.85906845],
        #     [0.80734766, 1., 0.7689176, 0.03114461, 0.8762582, 0.43904004, 1., 0.43220213],
        #     [0.5552479, 0.69819987, 0.3041658, 0.05688307, 0.6095966, 0.1148691, 0.07496238, 0.92375517],
        #     [0.06256049, 0.07636435, 0.46012923, 1., 0.6332141, 0.08982313, 0.19479209, 0.],
        #     [0.2804447, 0.37429893, 0.9397508, 0.08754648, 0.44962984, 0.9984155, 0.4275801, 0.35328367],
        #     [0.7790345, 0.47438887, 0.07272089, 0.44554535, 0.5074186, 0.00810621, 0.66473794, 0.7137883],
        #     [0.94986784, 0.23257238, 0.29512757, 1., 0.33982316, 0., 0.587823, 0.69913757]
        # ], 'float32')[None, ..., None]
        expect_foreground = np.array([
            0.63643575, 0.5393383, 0.54575455, 0.5617013, 0.5481832, 0.34813958, 0.48548293, 0.4057788, 0.676233,
            0.5752755, 0.7389578, 0.8520669, 0.48049578, 0.7177707, 0.7053192, 0.6889301, 0.7195343, 0.59866583,
            0.8488392, 0.46329308, 0.6653762, 0.4819289, 0.5968173, 0.46841124, 0.4512438, 0.45624122, 0.50871354,
            0.53833604, 0.39216414, 0.47163564, 0.7203853, 0.2132433, 0.28958243, 0.46663117, 0.6072326, 0.6288124,
            0.52011883, 0.6652986, 0.5407318, 0.41260004, 0.3794256, 0.74962455, 0.36097884, 0.34719044, 0.5279489,
            0.55848414, 0.4024943, 0.84667146, 0.7121092, 0.29701158, 0.8615257, 0.32979423, 0.90053415, 0.8632599,
            0.5922104, 0.29957232, 0.36101297, 0.569869, 0.5810652, 0.6413783, 0.43672624, 0.7782101, 0.78166276,
            0.5742374, 0.6152645, 0.6910654, 0.4770149, 0.25318623, 0.9387412, 0.6919142, 0.53126025, 0.7804439,
            0.7761405, 0.6576502, 0.5001544, 0.6279176, 0.6233221, 0.88606775, 0.64196193, 0.65020454, 0.6411039,
            0.6927581, 0.54738796, 0.6124942, 0.2618085, 0.5329624, 0.43437442, 0.70397955, 0.7267013, 0.55411386,
            0.71005416, 0.6363628, 0.6111034, 0.43850935, 0.2623937, 0.43263245, 0.6614377, 0.5878175, 0.5803008,
            0.71387535, 0.58566856, 0.5143839, 0.5660574, 0.44017857, 0.70568544, 0.18590623, 0.52598953, 0.80654633,
            0.4531601, 0.3600964, 0.3676259, 0.57011044, 0.5732017, 0.4885182, 0.62915945, 0.59969705, 0.45623335,
            0.36184895, 0.4927476, 0.36383787, 0.4457969, 0.6505098, 0.5516541, 0.4147923, 0.3729949, 0.6516354,
            0.26016507, 0.71231824, 0.42450985, 0.5961083, 0.5993575, 0.6055299, 0.55670315, 0.49417695, 0.63954157,
            0.2605812, 0.7864102, 0.08514008, 0.61959535, 0.49442813, 0.7038975, 0.7417152, 0.68950146, 0.58747464,
            0.7728134, 0.2896039, 0.6121861, 0.7981277, 0.57886165, 0.47569034, 0.46832433, 0.54824024, 0.445836,
            0.3169025, 0.4611885, 0.5680112, 0.5465512, 0.7073043, 0.58109045, 0.600929, 0.6688258, 0.65596175,
            0.65121007, 0.3008534, 0.8049505, 0.38797256, 0.5893061, 0.7393686, 0.37984574, 0.60013086, 0.8669779,
            0.7042662, 0.7095632, 0.6528353, 0.56445724, 0.49831256, 0.5334841, 0.84693885, 0.0627746, 0.33558822,
            0.70219105, 0.5160879, 0.70137024, 0.4832673, 0.5497502, 0.6378361, 0.60434085, 0.4132361, 0.5038009,
            0.36833617, 0.7502675, 0.39295715], 'float32').reshape((1, 8, 8, 3))
        expect_background = np.array([
            0.15491472, 0.6986748, 0.0916074, 0.33663505, 0.39207208, 0.36682498, 0.5242995, 0.20102674, 0.6953046,
            0.6572691, 0.5558841, 0.7148312, 0.34698486, 0.6702168, 0.5566326, 0.7412155, 0.5410442, 0.6591946,
            0.79592675, 0.29469302, 0.60627, 0.25629494, 0.7423198, 0.24485973, 0.44852337, 0.5666226, 0.3104468,
            0.7151097, 0.43143523, 0.62465274, 0.5580805, 0.4800001, 0.6374562, 0.41617274, 0.56845057, 0.6928023,
            0.3593245, 0.49614248, 0.50801, 0.2860632, 0.4227474, 0.7109958, 0.6494788, 0.55558574, 0.5696635,
            0.5262914, 0.44553012, 0.7346207, 0.74153024, 0.4492341, 0.740955, 0.7192508, 0.5728883, 0.64003825,
            0.6748761, 0.55837816, 0.55292416, 0.55483353, 0.6451439, 0.7502647, 0.57759833, 0.6534846, 0.60583496,
            0.53492934, 0.434019, 0.6620118, 0.55101395, 0.6529008, 0.5916419, 0.525244, 0.54715556, 0.83799005,
            0.54682624, 0.6402504, 0.4638701, 0.69684136, 0.63566786, 0.674834, 0.32674968, 0.7583693, 0.6481549,
            0.2764023, 0.31640118, 0.5697286, 0.42409933, 0.669244, 0.48665887, 0.9113772, 0.67800236, 0.35517135,
            0.6870166, 0.72518706, 0.3333166, 0.53287476, 0.5235224, 0.592191, 0.48009497, 0.5054633, 0.8999939,
            0.7590879, 0.8409113, 0.729845, 0.46675456, 0.20391384, 0.5480571, 0.64430845, 0.50490135, 0.66959065,
            0.5270175, 0.29702714, 0.32234403, 0.20885073, 0.22119612, 0.24995923, 0.8672972, 0.5361104, 0.32087263,
            0.4289161, 0.44903368, 0.37258908, 0.26045063, 0.42466572, 0.4204539, 0.588392, 0.42549825, 0.77938527,
            0.7130966, 0.5615194, 0.66839343, 0.79373837, 0.83934796, 0.34163198, 0.661323, 0.38419867, 0.5515048,
            0.6843853, 0.72100925, 0.66097224, 0.62224174, 0.45032647, 0.6487561, 0.6080079, 0.797624, 0.6020824,
            0.5302439, 0.50977427, 0.6022098, 0.7466674, 0.49296185, 0.60158277, 0.2990714, 0.59631014, 0.43239373,
            0.467214, 0.47530895, 0.4940945, 0.64404273, 0.6617516, 0.48578796, 0.8253259, 0.6281676, 0.95192885,
            0.7482485, 0.4933876, 0.70548606, 0.28207606, 0.5166349, 0.7239617, 0.5536053, 0.6860008, 0.63710445,
            0.5570144, 0.8699466, 0.8234775, 0.61688054, 0.4919668, 0.6028154, 0.7242892, 0.6472714, 0.56244767,
            0.7753851, 0.32395327, 0.73941755, 0.27406898, 0.5836774, 0.58545065, 0.47686526, 0.40137804, 0.5746803,
            0.5550096, 0.59725994, 0.50262606], 'float32').reshape((1, 8, 8, 3))
        expect_alpha = np.array([
            0.0, 0.0, 0.0, 0.63081944, 0.26980552, 0.264116, 0.10057952, 0.0, 0.06050187, 0.7817345, 1.0, 0.3485754,
            0.0026407787, 0.18617024, 1.0, 0.65744334, 0.85347986, 1.0, 1.0, 0.17638329, 1.0, 0.11447867, 1.0,
            0.33037677, 0.53837454, 0.697568, 0.092691585, 0.0035082304, 1.0, 0.0, 0.0, 1.0, 0.0, 0.043522693,
            0.0019255277, 1.0, 0.21162157, 0.0, 0.017780432, 0.5558652, 0.0, 0.75152016, 0.99596095, 0.0, 0.32922584,
            1.0, 0.47545916, 0.21291742, 0.98921734, 0.3933564, 0.0, 0.70605075, 0.5865724, 0.0, 0.849033, 0.08573297,
            1.0, 0.07618615, 0.26896274, 1.0, 0.012406412, 0.0, 0.42038578, 1.0], 'float32').reshape((1, 8, 8, 1))

        alfgbg = np.concatenate([source_alpha, source_foreground, source_background], axis=-1)
        _, alpha, foreground, background = Fusion()([source_image, alfgbg])

        self.assertAllClose(self.evaluate(foreground), expect_foreground)
        self.assertAllClose(self.evaluate(background), expect_background)
        self.assertAllClose(self.evaluate(alpha), expect_alpha)


if __name__ == '__main__':
    tf.test.main()

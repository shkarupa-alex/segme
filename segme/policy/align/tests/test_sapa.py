import numpy as np
import tensorflow as tf
from keras.src import testing

from segme.policy.align.sapa import LocalAttention
from segme.policy.align.sapa import SapaFeatureAlignment


class TestSapaFeatureAlignment(testing.TestCase):
    def test_layer(self):
        self.run_layer_test(
            SapaFeatureAlignment,
            init_kwargs={"filters": 6, "kernel_size": 5, "embedding_size": 16},
            input_shape=((2, 16, 16, 4), (2, 8, 8, 8)),
            input_dtype=("float32",) * 2,
            expected_output_shape=(2, 16, 16, 6),
            expected_output_dtype="float32",
        )


class TestLocalAttention(testing.TestCase):
    def test_layer(self):
        self.run_layer_test(
            LocalAttention,
            init_kwargs={"kernel_size": 5},
            input_shape=((2, 16, 16, 4), (2, 8, 8, 4), (2, 8, 8, 6)),
            input_dtype=("float32",) * 3,
            expected_output_shape=(2, 16, 16, 6),
            expected_output_dtype="float32",
        )
        self.run_layer_test(
            LocalAttention,
            init_kwargs={"kernel_size": 3},
            input_shape=((2, 16, 24, 4), (2, 8, 8, 4), (2, 8, 8, 2)),
            input_dtype=("float32",) * 3,
            expected_output_shape=(2, 16, 24, 2),
            expected_output_dtype="float32",
        )

    def test_value(self):
        q = np.array(
            [
                0.402,
                -0.414,
                -0.191,
                -0.24,
                -0.709,
                -0.143,
                -1.096,
                -0.262,
                1.112,
                -0.047,
                -0.042,
                0.702,
                -0.537,
                0.479,
                0.635,
                -0.254,
                -0.133,
                0.851,
                -0.096,
                0.361,
                2.723,
                -0.112,
                -0.103,
                0.4,
                -0.708,
                -0.649,
                0.282,
                0.323,
                -0.564,
                -0.336,
                0.021,
                -0.688,
                -0.335,
                0.469,
                -0.562,
                -1.912,
                -0.054,
                0.113,
                1.055,
                -0.325,
                -0.182,
                0.221,
                -1.116,
                0.471,
                -0.624,
                -0.611,
                0.91,
                0.294,
                0.602,
                0.916,
                -1.176,
                0.087,
                0.253,
                -1.197,
                -0.458,
                -1.351,
                -0.012,
                -0.74,
                -3.145,
                1.814,
                0.318,
                -0.784,
                -0.092,
                -0.458,
                -0.206,
                -1.835,
                -1.139,
                1.034,
                -0.556,
                -0.913,
                -0.582,
                -0.912,
                -0.243,
                -0.563,
                -0.342,
                -0.214,
                0.674,
                0.49,
                0.507,
                0.126,
                1.273,
                -0.253,
                0.765,
                -0.572,
                -0.589,
                0.508,
                -1.069,
                0.236,
                0.858,
                -0.402,
                -0.344,
                0.282,
                -1.558,
                -0.352,
                -0.03,
                0.69,
                0.206,
                0.34,
                0.884,
                -0.036,
                -0.923,
                -1.54,
                1.273,
                2.393,
                1.672,
                1.845,
                -0.629,
                -0.203,
                0.415,
                -1.969,
                -1.797,
                0.709,
                -0.394,
                -0.054,
                -0.777,
                1.422,
                -0.747,
                1.16,
                -1.734,
                -0.878,
                1.286,
                0.939,
                1.372,
                0.137,
                0.104,
                -1.11,
                -0.441,
                0.783,
                -0.429,
                -0.961,
                -0.866,
                -0.175,
                -0.046,
                -0.989,
                0.308,
                1.318,
                1.828,
                1.831,
                0.522,
                -0.483,
                -0.635,
                -0.134,
                0.38,
                2.11,
                -0.056,
                -0.344,
                -0.667,
                -0.989,
                0.534,
                -0.44,
                1.631,
                -0.319,
                -0.015,
                -0.518,
                0.356,
                -0.512,
                -1.351,
                -0.653,
                -0.392,
                0.705,
                -2.099,
                1.245,
                -0.847,
                0.583,
                -1.174,
                -1.013,
                1.244,
                -0.795,
                -0.981,
                0.876,
                0.322,
                0.299,
                -0.662,
                1.318,
                -0.507,
                -0.652,
                -0.944,
                -2.055,
                -0.242,
                1.361,
                -0.058,
                1.15,
                -0.417,
                -0.289,
                -0.77,
                1.43,
                -0.623,
                -0.776,
                -1.873,
                0.714,
                -1.023,
                -1.906,
            ],
            "float32",
        ).reshape((2, 6, 8, 2))
        k = np.array(
            [
                -1.836,
                -1.745,
                1.001,
                -1.609,
                0.843,
                -0.291,
                -1.078,
                2.233,
                -1.06,
                0.044,
                0.695,
                -0.025,
                0.055,
                0.63,
                -1.393,
                -1.718,
                -0.419,
                0.588,
                -0.149,
                -2.053,
                1.007,
                -0.594,
                -0.521,
                -0.512,
                -0.203,
                -0.004,
                -0.907,
                1.465,
                -0.234,
                -0.335,
                1.305,
                0.236,
                -0.073,
                1.086,
                -0.386,
                -1.1,
                1.017,
                0.639,
                -0.872,
                -0.164,
                0.907,
                1.188,
                -0.947,
                0.022,
                1.653,
                0.419,
                -2.179,
                -0.294,
            ],
            "float32",
        ).reshape((2, 3, 4, 2))
        v = np.array(
            [
                1.433,
                -0.246,
                -0.085,
                -0.271,
                -0.822,
                0.099,
                0.953,
                -0.819,
                -0.458,
                -1.981,
                -0.816,
                1.309,
                -0.79,
                0.284,
                -1.49,
                0.43,
                -0.411,
                -0.24,
                0.448,
                -0.211,
                0.863,
                0.887,
                -0.545,
                2.904,
                0.807,
                0.148,
                -1.623,
                0.87,
                -0.529,
                -0.842,
                -0.461,
                0.149,
                0.973,
                -0.7,
                0.864,
                0.84,
                0.497,
                -0.188,
                -1.529,
                1.231,
                -0.072,
                0.26,
                0.028,
                -0.852,
                -0.784,
                0.272,
                -1.126,
                0.504,
            ],
            "float32",
        ).reshape((2, 3, 4, 2))
        expected = np.array(
            [
                -0.02029056,
                -0.05081211,
                0.16397914,
                -0.20133615,
                0.32588157,
                -0.35120395,
                0.69750804,
                -0.41714945,
                -0.40369764,
                0.18887334,
                0.13652219,
                -0.19168559,
                0.16011463,
                -0.26410174,
                -0.33401704,
                0.05471744,
                -0.11583816,
                -0.17515446,
                -0.04935616,
                -0.15969993,
                -0.4139461,
                0.12625943,
                -0.2591719,
                -0.1062943,
                -0.8917698,
                0.25226623,
                -0.22744526,
                0.0814299,
                -0.54947835,
                0.11209746,
                -0.5894016,
                0.14575712,
                -0.07322624,
                -0.31290242,
                0.88859665,
                -0.24225454,
                -0.11440272,
                -0.06332765,
                -0.07351519,
                0.23115009,
                -0.15638188,
                0.4049423,
                0.24625479,
                -0.10969624,
                -0.7773104,
                0.6244302,
                -0.06844439,
                0.35346016,
                -0.27006897,
                0.05371841,
                0.4851272,
                -0.5107225,
                0.32359037,
                -0.10221229,
                0.7723268,
                -0.22443798,
                -0.29973212,
                0.38847533,
                0.9433186,
                -0.81011444,
                -0.37102258,
                0.6117059,
                -0.4393634,
                0.5849345,
                0.35681492,
                -0.20346302,
                -0.2587641,
                -0.58921486,
                0.1302972,
                -0.21425802,
                0.12787536,
                -0.22328329,
                -0.3641903,
                0.53582627,
                -0.3806181,
                0.6069396,
                -0.04583004,
                0.39188382,
                -0.06035679,
                0.44994146,
                -0.1763696,
                0.23649134,
                -0.04985327,
                0.06317425,
                -0.28107363,
                -0.28437784,
                -0.2705959,
                -0.53295875,
                0.00271061,
                0.6154375,
                -0.3462778,
                0.63594365,
                -1.0404247,
                0.61323714,
                -0.18569002,
                0.39157745,
                0.05252049,
                0.09225062,
                0.18984044,
                0.06125417,
                0.4414704,
                0.3411469,
                0.08539508,
                -0.06268255,
                -0.08283336,
                0.03924807,
                -0.4185937,
                0.36820656,
                -0.29051003,
                -0.02322528,
                -0.6539758,
                0.3886081,
                0.07726442,
                0.17355213,
                -0.736375,
                0.40049145,
                -0.60265696,
                0.3068032,
                0.21072397,
                0.27230582,
                -0.12084644,
                0.04667496,
                -0.10465236,
                0.03925759,
                -0.286214,
                0.02073698,
                -0.24958909,
                0.08733147,
                0.36471197,
                0.18973169,
                0.05090059,
                0.05661301,
                0.2832803,
                0.08890834,
                -0.2059936,
                0.10995241,
                -0.4342314,
                0.15081835,
                -0.3216356,
                0.1745103,
                -0.72507274,
                0.2919539,
                -0.19096251,
                0.0546675,
                0.20341484,
                0.08753362,
                0.36484852,
                0.18489484,
                0.04403344,
                0.03196852,
                -0.29972512,
                0.1324658,
                -0.3886327,
                0.24366537,
                -0.3243108,
                0.1937014,
                -1.0208286,
                0.46087402,
                -0.51397526,
                0.19760063,
                0.27646175,
                -0.48786625,
                0.2359858,
                -0.22644182,
                0.3984203,
                0.10999348,
                -0.12436053,
                0.15269837,
                -0.62861073,
                0.25774667,
                -0.18767607,
                0.13371725,
                -0.47823992,
                0.28443867,
                -0.6144488,
                0.35910076,
                0.56831706,
                0.44771954,
                0.2857002,
                -0.197348,
                0.21572791,
                -0.1419841,
                0.2471599,
                -0.03400319,
                -0.48286015,
                0.16597454,
                -0.3886327,
                0.38703722,
                -1.0534679,
                0.5146221,
                -0.9451703,
                0.49647352,
            ],
            "float32",
        ).reshape((2, 6, 8, 2))

        layer = LocalAttention(3)
        result = layer([q, k, v])

        self.assertAllClose(expected, result)

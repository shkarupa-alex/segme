import numpy as np
import tensorflow as tf
from tensorflow.python.framework import test_util
from ..impfunc import make_coords, query_features


@test_util.run_all_in_graph_and_eager_modes
class TestMakeCoords(tf.test.TestCase):
    def test_value(self):
        expected = np.array([
            [[-0.8, -0.833333], [-0.8, -0.5], [-0.8, -0.166667], [-0.8, 0.166667], [-0.8, 0.5], [-0.8, 0.833333]],
            [[-0.4, -0.833333], [-0.4, -0.5], [-0.4, -0.166667], [-0.4, 0.166667], [-0.4, 0.5], [-0.4, 0.833333]],
            [[0., -0.833333], [0., -0.5], [0., -0.166667], [0., 0.166667], [0., 0.5], [0., 0.833333]],
            [[0.4, -0.833333], [0.4, -0.5], [0.4, -0.166667], [0.4, 0.166667], [0.4, 0.5], [0.4, 0.833333]],
            [[0.8, -0.833333], [0.8, -0.5], [0.8, -0.166667], [0.8, 0.166667], [0.8, 0.5], [0.8, 0.833333]]
        ], 'float32')[None].repeat(3, axis=0)

        result = make_coords(np.zeros([3, 5, 6, 1]))
        result = self.evaluate(result)

        self.assertAllClose(expected, result)

    def test_fp16(self):
        expected = np.array([
            [[-0.8, -0.833333], [-0.8, -0.5], [-0.8, -0.166667], [-0.8, 0.166667], [-0.8, 0.5], [-0.8, 0.833333]],
            [[-0.4, -0.833333], [-0.4, -0.5], [-0.4, -0.166667], [-0.4, 0.166667], [-0.4, 0.5], [-0.4, 0.833333]],
            [[0., -0.833333], [0., -0.5], [0., -0.166667], [0., 0.166667], [0., 0.5], [0., 0.833333]],
            [[0.4, -0.833333], [0.4, -0.5], [0.4, -0.166667], [0.4, 0.166667], [0.4, 0.5], [0.4, 0.833333]],
            [[0.8, -0.833333], [0.8, -0.5], [0.8, -0.166667], [0.8, 0.166667], [0.8, 0.5], [0.8, 0.833333]]
        ], 'float16')[None].repeat(3, axis=0)

        result = make_coords(np.zeros([3, 5, 6, 1]), dtype='float16')
        result = self.evaluate(result)

        self.assertAllClose(expected, result, rtol=3e-3)


@test_util.run_all_in_graph_and_eager_modes
class TestQueryFeatures(tf.test.TestCase):
    def test_simple(self):
        features = np.arange(15).reshape([1, 3, 5, 1]).transpose(3, 2, 1, 0).astype('float32')
        coords = make_coords(np.zeros([1, 6, 4, 1]))
        expected = np.array([[
            [[0., -0.16666651, -0.24999994], [5., -0.16666651, -0.75], [5., -0.16666651, 0.75],
             [10., -0.16666651, 0.24999994]],
            [[1., -0.49999982, -0.24999994], [6., -0.49999982, -0.75], [6., -0.49999982, 0.75],
             [11., -0.49999982, 0.24999994]],
            [[2., -0.83333313, -0.24999994], [7., -0.83333313, -0.75], [7., -0.83333313, 0.75],
             [12., -0.83333313, 0.24999994]],
            [[2., 0.83333343, -0.24999994], [7., 0.83333343, -0.75], [7., 0.83333343, 0.75],
             [12., 0.83333343, 0.24999994]],
            [[3., 0.5000001, -0.24999994], [8., 0.5000001, -0.75], [8., 0.5000001, 0.75], [13., 0.5000001, 0.24999994]],
            [[4., 0.1666671, -0.24999994], [9., 0.1666671, -0.75], [9., 0.1666671, 0.75], [14., 0.1666671, 0.24999994]]
        ]], 'float32')

        result = query_features(features, coords, tf.identity, cells=None, feat_unfold=False, local_ensemble=False)
        result = self.evaluate(result)

        self.assertAllClose(expected, result)
        self.assertDTypeEqual(result, np.float32)

    def test_fp16(self):
        features = np.arange(15).reshape([1, 3, 5, 1]).transpose(3, 2, 1, 0).astype('float32')
        coords = make_coords(np.zeros([1, 6, 4, 1]))
        expected = np.array([[
            [[0., -0.16666651, -0.24999994], [5., -0.16666651, -0.75], [5., -0.16666651, 0.75],
             [10., -0.16666651, 0.24999994]],
            [[1., -0.49999982, -0.24999994], [6., -0.49999982, -0.75], [6., -0.49999982, 0.75],
             [11., -0.49999982, 0.24999994]],
            [[2., -0.83333313, -0.24999994], [7., -0.83333313, -0.75], [7., -0.83333313, 0.75],
             [12., -0.83333313, 0.24999994]],
            [[2., 0.83333343, -0.24999994], [7., 0.83333343, -0.75], [7., 0.83333343, 0.75],
             [12., 0.83333343, 0.24999994]],
            [[3., 0.5000001, -0.24999994], [8., 0.5000001, -0.75], [8., 0.5000001, 0.75], [13., 0.5000001, 0.24999994]],
            [[4., 0.1666671, -0.24999994], [9., 0.1666671, -0.75], [9., 0.1666671, 0.75], [14., 0.1666671, 0.24999994]]
        ]], 'float32')

        result = query_features(
            features, coords, tf.identity, cells=None, feat_unfold=False, local_ensemble=False, dtype='float16')
        result = self.evaluate(result)

        self.assertAllClose(expected, result, rtol=2e-2)
        self.assertDTypeEqual(result, np.float32)

    def test_cell(self):
        features = np.arange(15).reshape([1, 3, 5, 1]).transpose(3, 2, 1, 0).astype('float32')
        coords = make_coords(np.zeros([1, 6, 4, 1]))
        cells = np.ones((1, 6, 4, 2)) * 2 / np.array([6, 4])
        expected = np.array([[
            [[0., -0.16666651, -0.24999994, 1.6666667, 1.5], [5., -0.16666651, -0.75, 1.6666667, 1.5],
             [5., -0.16666651, 0.75, 1.6666667, 1.5], [10., -0.16666651, 0.24999994, 1.6666667, 1.5]],
            [[1., -0.49999982, -0.24999994, 1.6666667, 1.5], [6., -0.49999982, -0.75, 1.6666667, 1.5],
             [6., -0.49999982, 0.75, 1.6666667, 1.5], [11., -0.49999982, 0.24999994, 1.6666667, 1.5]],
            [[2., -0.83333313, -0.24999994, 1.6666667, 1.5], [7., -0.83333313, -0.75, 1.6666667, 1.5],
             [7., -0.83333313, 0.75, 1.6666667, 1.5], [12., -0.83333313, 0.24999994, 1.6666667, 1.5]],
            [[2., 0.83333343, -0.24999994, 1.6666667, 1.5], [7., 0.83333343, -0.75, 1.6666667, 1.5],
             [7., 0.83333343, 0.75, 1.6666667, 1.5], [12., 0.83333343, 0.24999994, 1.6666667, 1.5]],
            [[3., 0.5000001, -0.24999994, 1.6666667, 1.5], [8., 0.5000001, -0.75, 1.6666667, 1.5],
             [8., 0.5000001, 0.75, 1.6666667, 1.5], [13., 0.5000001, 0.24999994, 1.6666667, 1.5]],
            [[4., 0.1666671, -0.24999994, 1.6666667, 1.5], [9., 0.1666671, -0.75, 1.6666667, 1.5],
             [9., 0.1666671, 0.75, 1.6666667, 1.5], [14., 0.1666671, 0.24999994, 1.6666667, 1.5]]]], 'float32')

        result = query_features(features, coords, tf.identity, cells=cells, feat_unfold=False, local_ensemble=False)
        result = self.evaluate(result)

        self.assertAllClose(expected, result)

    def test_unfold(self):
        features = np.arange(15).reshape([1, 3, 5, 1]).transpose(3, 2, 1, 0).astype('float32')
        coords = make_coords(np.zeros([1, 6, 4, 1]))
        expected = np.array([[
            [[0., 0., 0., 0., 0., 5., 0., 1., 6., -0.16666651, -0.24999994],
             [0., 0., 0., 0., 5., 10., 1., 6., 11., -0.16666651, -0.75],
             [0., 0., 0., 0., 5., 10., 1., 6., 11., -0.16666651, 0.75],
             [0., 0., 0., 5., 10., 0., 6., 11., 0., -0.16666651, 0.24999994]],
            [[0., 0., 5., 0., 1., 6., 0., 2., 7., -0.49999982, -0.24999994],
             [0., 5., 10., 1., 6., 11., 2., 7., 12., -0.49999982, -0.75],
             [0., 5., 10., 1., 6., 11., 2., 7., 12., -0.49999982, 0.75],
             [5., 10., 0., 6., 11., 0., 7., 12., 0., -0.49999982, 0.24999994]],
            [[0., 1., 6., 0., 2., 7., 0., 3., 8., -0.83333313, -0.24999994],
             [1., 6., 11., 2., 7., 12., 3., 8., 13., -0.83333313, -0.75],
             [1., 6., 11., 2., 7., 12., 3., 8., 13., -0.83333313, 0.75],
             [6., 11., 0., 7., 12., 0., 8., 13., 0., -0.83333313, 0.24999994]],
            [[0., 1., 6., 0., 2., 7., 0., 3., 8., 0.83333343, -0.24999994],
             [1., 6., 11., 2., 7., 12., 3., 8., 13., 0.83333343, -0.75],
             [1., 6., 11., 2., 7., 12., 3., 8., 13., 0.83333343, 0.75],
             [6., 11., 0., 7., 12., 0., 8., 13., 0., 0.83333343, 0.24999994]],
            [[0., 2., 7., 0., 3., 8., 0., 4., 9., 0.5000001, -0.24999994],
             [2., 7., 12., 3., 8., 13., 4., 9., 14., 0.5000001, -0.75],
             [2., 7., 12., 3., 8., 13., 4., 9., 14., 0.5000001, 0.75],
             [7., 12., 0., 8., 13., 0., 9., 14., 0., 0.5000001, 0.24999994]],
            [[0., 3., 8., 0., 4., 9., 0., 0., 0., 0.1666671, -0.24999994],
             [3., 8., 13., 4., 9., 14., 0., 0., 0., 0.1666671, -0.75],
             [3., 8., 13., 4., 9., 14., 0., 0., 0., 0.1666671, 0.75],
             [8., 13., 0., 9., 14., 0., 0., 0., 0., 0.1666671, 0.24999994]]]], 'float32')

        result = query_features(features, coords, tf.identity, cells=None, feat_unfold=True, local_ensemble=False)
        result = self.evaluate(result)

        self.assertAllClose(expected, result)

    def test_local(self):
        features = np.arange(15).reshape([1, 3, 5, 1]).transpose(3, 2, 1, 0).astype('float32')
        coords = make_coords(np.zeros([1, 6, 4, 1]))
        expected = np.array([[
            [[0.0000000e+00, -1.6666651e-01, -2.4999994e-01], [3.1250000e+00, -1.6666651e-01, 0.0000000e+00],
             [6.8750000e+00, -1.6666651e-01, 0.0000000e+00], [1.0000000e+01, -1.6666651e-01, 2.4999994e-01]],
            [[7.5000006e-01, 2.9802322e-08, -2.4999993e-01], [3.8750002e+00, -1.4901161e-08, 0.0000000e+00],
             [7.6250010e+00, -1.4901161e-08, 0.0000000e+00], [1.0750000e+01, 2.9802322e-08, 2.4999993e-01]],
            [[1.5833335e+00, -2.9802322e-08, -2.4999994e-01], [4.7083330e+00, 0.0000000e+00, 0.0000000e+00],
             [8.4583340e+00, 1.4901161e-08, 0.0000000e+00], [1.1583332e+01, -2.9802322e-08, 2.4999994e-01]],
            [[2.4166665e+00, 0.0000000e+00, -2.4999996e-01], [5.5416670e+00, 2.9802322e-08, -2.9802322e-08],
             [9.2916679e+00, 4.4703484e-08, 0.0000000e+00], [1.2416668e+01, 0.0000000e+00, 2.4999996e-01]],
            [[3.2499995e+00, 0.0000000e+00, -2.4999993e-01], [6.3750000e+00, 1.4901161e-08, 7.4505806e-09],
             [1.0125000e+01, 1.4901161e-08, -7.4505806e-09], [1.3249998e+01, 0.0000000e+00, 2.4999993e-01]],
            [[4.0000000e+00, 1.6666710e-01, -2.4999994e-01], [7.1250000e+00, 1.6666710e-01, 0.0000000e+00],
             [1.0875000e+01, 1.6666710e-01, 0.0000000e+00], [1.4000000e+01, 1.6666710e-01, 2.4999994e-01]]]], 'float32')

        result = query_features(features, coords, tf.identity, cells=None, feat_unfold=False, local_ensemble=True)
        result = self.evaluate(result)

        self.assertAllClose(expected, result)

    def test_complex(self):
        features = np.arange(60).reshape([2, 3, 5, 2]).transpose(3, 2, 1, 0).astype('float32')
        coords = make_coords(np.zeros([2, 6, 4, 1]))
        cells = np.ones((2, 6, 4, 2)) * 2 / np.array([6, 4])
        expected = np.array([
            [[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+01, 0.0000000e+00,
               2.0000000e+00, 1.2000000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.0000000e+01,
               4.0000000e+01, 0.0000000e+00, 3.2000000e+01, 4.2000000e+01, -1.6666651e-01, -2.4999994e-01,
               1.6666667e+00, 1.5000000e+00],
              [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 6.2500000e+00, 1.6250000e+01, 1.2500000e+00,
               8.2500000e+00, 1.8250000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.8750000e+01, 3.6250000e+01,
               4.6250000e+01, 2.0000000e+01, 3.8250000e+01, 4.8250000e+01, -1.6666651e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.7500000e+00, 1.3750000e+01, 1.2500000e+01, 5.7500000e+00,
               1.5750000e+01, 1.3750000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.3750000e+01, 4.3750000e+01,
               3.1250000e+01, 3.5750000e+01, 4.5750000e+01, 3.2500000e+01, -1.6666651e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+01, 2.0000000e+01, 0.0000000e+00, 1.2000000e+01,
               2.2000000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 4.0000000e+01, 5.0000000e+01,
               0.0000000e+00, 4.2000000e+01, 5.2000000e+01, 0.0000000e+00, -1.6666651e-01, 2.4999994e-01, 1.6666667e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 0.0000000e+00, 7.5000005e+00, 0.0000000e+00, 1.5000001e+00, 1.1500000e+01, 0.0000000e+00,
               3.5000000e+00, 1.3500000e+01, 0.0000000e+00, 2.2500002e+01, 3.0000002e+01, 0.0000000e+00, 3.1500000e+01,
               4.1499996e+01, 0.0000000e+00, 3.3500000e+01, 4.3500000e+01, 2.9802322e-08, -2.4999993e-01, 1.6666665e+00,
               1.5000000e+00],
              [0.0000000e+00, 4.6875005e+00, 1.2187502e+01, 9.3750012e-01, 7.7500005e+00, 1.7750000e+01, 2.1875000e+00,
               9.7500000e+00, 1.9750000e+01, 1.4062502e+01, 2.7187504e+01, 3.4687508e+01, 1.9687500e+01, 3.7750000e+01,
               4.7750004e+01, 2.0937500e+01, 3.9750000e+01, 4.9750004e+01, -1.4901161e-08, 0.0000000e+00, 1.6666667e+00,
               1.5000001e+00],
              [2.8125005e+00, 1.0312502e+01, 9.3750010e+00, 5.2500005e+00, 1.5250002e+01, 1.3437500e+01, 7.2500010e+00,
               1.7250002e+01, 1.4687500e+01, 2.5312504e+01, 3.2812504e+01, 2.3437504e+01, 3.5250004e+01, 4.5250000e+01,
               3.2187500e+01, 3.7250004e+01, 4.7250004e+01, 3.3437500e+01, -1.4901161e-08, 0.0000000e+00, 1.6666667e+00,
               1.5000001e+00],
              [7.5000005e+00, 1.5000001e+01, 0.0000000e+00, 1.1500000e+01, 2.1500000e+01, 0.0000000e+00, 1.3500000e+01,
               2.3500000e+01, 0.0000000e+00, 3.0000002e+01, 3.7500004e+01, 0.0000000e+00, 4.1499996e+01, 5.1500000e+01,
               0.0000000e+00, 4.3500000e+01, 5.3500000e+01, 0.0000000e+00, 2.9802322e-08, 2.4999993e-01, 1.6666665e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 1.1666669e+00, 1.1166666e+01, 0.0000000e+00, 3.1666670e+00, 1.3166666e+01, 0.0000000e+00,
               5.1666670e+00, 1.5166666e+01, 0.0000000e+00, 3.1166668e+01, 4.1166664e+01, 0.0000000e+00, 3.3166664e+01,
               4.3166664e+01, 0.0000000e+00, 3.5166664e+01, 4.5166664e+01, -2.9802322e-08, -2.4999994e-01,
               1.6666667e+00, 1.5000000e+00],
              [7.2916681e-01, 7.4166670e+00, 1.7416668e+01, 1.9791667e+00, 9.4166660e+00, 1.9416668e+01, 3.2291670e+00,
               1.1416666e+01, 2.1416668e+01, 1.9479168e+01, 3.7416668e+01, 4.7416664e+01, 2.0729168e+01, 3.9416664e+01,
               4.9416668e+01, 2.1979168e+01, 4.1416664e+01, 5.1416664e+01, 0.0000000e+00, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [4.9166670e+00, 1.4916666e+01, 1.3229167e+01, 6.9166670e+00, 1.6916668e+01, 1.4479167e+01, 8.9166670e+00,
               1.8916668e+01, 1.5729167e+01, 3.4916668e+01, 4.4916664e+01, 3.1979168e+01, 3.6916668e+01, 4.6916664e+01,
               3.3229168e+01, 3.8916664e+01, 4.8916664e+01, 3.4479164e+01, 1.4901161e-08, 0.0000000e+00, 1.6666666e+00,
               1.5000000e+00],
              [1.1166666e+01, 2.1166668e+01, 0.0000000e+00, 1.3166666e+01, 2.3166664e+01, 0.0000000e+00, 1.5166666e+01,
               2.5166666e+01, 0.0000000e+00, 4.1166664e+01, 5.1166664e+01, 0.0000000e+00, 4.3166664e+01, 5.3166668e+01,
               0.0000000e+00, 4.5166664e+01, 5.5166664e+01, 0.0000000e+00, -2.9802322e-08, 2.4999994e-01, 1.6666667e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 2.8333335e+00, 1.2833334e+01, 0.0000000e+00, 4.8333330e+00, 1.4833334e+01, 0.0000000e+00,
               6.8333340e+00, 1.6833334e+01, 0.0000000e+00, 3.2833332e+01, 4.2833336e+01, 0.0000000e+00, 3.4833332e+01,
               4.4833336e+01, 0.0000000e+00, 3.6833336e+01, 4.6833332e+01, 0.0000000e+00, -2.4999996e-01, 1.6666667e+00,
               1.5000000e+00],
              [1.7708333e+00, 9.0833330e+00, 1.9083334e+01, 3.0208335e+00, 1.1083334e+01, 2.1083332e+01, 4.2708330e+00,
               1.3083334e+01, 2.3083334e+01, 2.0520832e+01, 3.9083332e+01, 4.9083332e+01, 2.1770834e+01, 4.1083336e+01,
               5.1083332e+01, 2.3020832e+01, 4.3083336e+01, 5.3083336e+01, 2.9802322e-08, -2.9802322e-08, 1.6666667e+00,
               1.5000000e+00],
              [6.5833340e+00, 1.6583334e+01, 1.4270834e+01, 8.5833340e+00, 1.8583336e+01, 1.5520835e+01, 1.0583334e+01,
               2.0583334e+01, 1.6770836e+01, 3.6583336e+01, 4.6583336e+01, 3.3020836e+01, 3.8583336e+01, 4.8583336e+01,
               3.4270836e+01, 4.0583336e+01, 5.0583336e+01, 3.5520836e+01, 4.4703484e-08, 0.0000000e+00, 1.6666669e+00,
               1.5000001e+00],
              [1.2833334e+01, 2.2833332e+01, 0.0000000e+00, 1.4833334e+01, 2.4833336e+01, 0.0000000e+00, 1.6833334e+01,
               2.6833334e+01, 0.0000000e+00, 4.2833336e+01, 5.2833332e+01, 0.0000000e+00, 4.4833336e+01, 5.4833332e+01,
               0.0000000e+00, 4.6833332e+01, 5.6833336e+01, 0.0000000e+00, 0.0000000e+00, 2.4999996e-01, 1.6666667e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 4.5000000e+00, 1.4499998e+01, 0.0000000e+00, 6.4999990e+00, 1.6499998e+01, 0.0000000e+00,
               5.9999990e+00, 1.3499998e+01, 0.0000000e+00, 3.4499996e+01, 4.4499996e+01, 0.0000000e+00, 3.6499996e+01,
               4.6499996e+01, 0.0000000e+00, 2.8499996e+01, 3.5999992e+01, 0.0000000e+00, -2.4999993e-01, 1.6666666e+00,
               1.4999998e+00],
              [2.8125000e+00, 1.0750001e+01, 2.0750000e+01, 4.0625000e+00, 1.2750000e+01, 2.2750000e+01, 3.7499998e+00,
               1.0687499e+01, 1.8187498e+01, 2.1562500e+01, 4.0750000e+01, 5.0750000e+01, 2.2812500e+01, 4.2750000e+01,
               5.2750000e+01, 1.7812498e+01, 3.3187496e+01, 4.0687496e+01, 1.4901161e-08, 7.4505806e-09, 1.6666667e+00,
               1.5000000e+00],
              [8.2500000e+00, 1.8250000e+01, 1.5312500e+01, 1.0250000e+01, 2.0250000e+01, 1.6562500e+01, 8.8124990e+00,
               1.6312498e+01, 1.3124999e+01, 3.8250000e+01, 4.8250000e+01, 3.4062500e+01, 4.0250000e+01, 5.0250000e+01,
               3.5312500e+01, 3.1312496e+01, 3.8812496e+01, 2.7187498e+01, 1.4901161e-08, -7.4505806e-09, 1.6666667e+00,
               1.5000000e+00],
              [1.4499998e+01, 2.4499996e+01, 0.0000000e+00, 1.6499998e+01, 2.6499996e+01, 0.0000000e+00, 1.3499998e+01,
               2.0999996e+01, 0.0000000e+00, 4.4499996e+01, 5.4499992e+01, 0.0000000e+00, 4.6499996e+01, 5.6499992e+01,
               0.0000000e+00, 3.5999992e+01, 4.3499992e+01, 0.0000000e+00, 0.0000000e+00, 2.4999993e-01, 1.6666666e+00,
               1.4999998e+00]],
             [[0.0000000e+00, 6.0000000e+00, 1.6000000e+01, 0.0000000e+00, 8.0000000e+00, 1.8000000e+01, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.6000000e+01, 4.6000000e+01, 0.0000000e+00, 3.8000000e+01,
               4.8000000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, -2.4999994e-01, 1.6666667e+00,
               1.5000000e+00],
              [3.7500000e+00, 1.2250000e+01, 2.2250000e+01, 5.0000000e+00, 1.4250000e+01, 2.4250000e+01, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 2.2500000e+01, 4.2250000e+01, 5.2250000e+01, 2.3750000e+01, 4.4250000e+01,
               5.4250000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [9.7500000e+00, 1.9750000e+01, 1.6250000e+01, 1.1750000e+01, 2.1750000e+01, 1.7500000e+01, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 3.9750000e+01, 4.9750000e+01, 3.5000000e+01, 4.1750000e+01, 5.1750000e+01,
               3.6250000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [1.6000000e+01, 2.6000000e+01, 0.0000000e+00, 1.8000000e+01, 2.8000000e+01, 0.0000000e+00, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 4.6000000e+01, 5.6000000e+01, 0.0000000e+00, 4.8000000e+01, 5.8000000e+01,
               0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, 2.4999994e-01, 1.6666667e+00,
               1.5000000e+00]]],
            [[[0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00, 1.1000000e+01, 0.0000000e+00,
               3.0000000e+00, 1.3000000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.1000000e+01,
               4.1000000e+01, 0.0000000e+00, 3.3000000e+01, 4.3000000e+01, -1.6666651e-01, -2.4999994e-01,
               1.6666667e+00, 1.5000000e+00],
              [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 6.2500000e-01, 7.2500000e+00, 1.7250000e+01, 1.8750000e+00,
               9.2500000e+00, 1.9250000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.9375000e+01, 3.7250000e+01,
               4.7250000e+01, 2.0625000e+01, 3.9250000e+01, 4.9250000e+01, -1.6666651e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 4.7500000e+00, 1.4750000e+01, 1.3125000e+01, 6.7500000e+00,
               1.6750000e+01, 1.4375000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.4750000e+01, 4.4750000e+01,
               3.1875000e+01, 3.6750000e+01, 4.6750000e+01, 3.3125000e+01, -1.6666651e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.1000000e+01, 2.1000000e+01, 0.0000000e+00, 1.3000000e+01,
               2.3000000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 4.1000000e+01, 5.1000000e+01,
               0.0000000e+00, 4.3000000e+01, 5.3000000e+01, 0.0000000e+00, -1.6666651e-01, 2.4999994e-01, 1.6666667e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 7.5000006e-01, 8.2500010e+00, 0.0000000e+00, 2.5000000e+00, 1.2500000e+01, 0.0000000e+00,
               4.5000000e+00, 1.4500000e+01, 0.0000000e+00, 2.3250002e+01, 3.0750002e+01, 0.0000000e+00, 3.2500000e+01,
               4.2500000e+01, 0.0000000e+00, 3.4499996e+01, 4.4500000e+01, 2.9802322e-08, -2.4999993e-01, 1.6666665e+00,
               1.5000000e+00],
              [4.6875006e-01, 5.4375005e+00, 1.2937502e+01, 1.5625002e+00, 8.7500000e+00, 1.8750000e+01, 2.8125000e+00,
               1.0750000e+01, 2.0750000e+01, 1.4531252e+01, 2.7937504e+01, 3.5437508e+01, 2.0312500e+01, 3.8750000e+01,
               4.8750004e+01, 2.1562500e+01, 4.0750000e+01, 5.0750004e+01, -1.4901161e-08, 0.0000000e+00, 1.6666667e+00,
               1.5000001e+00],
              [3.5625007e+00, 1.1062502e+01, 9.8437510e+00, 6.2500005e+00, 1.6250002e+01, 1.4062500e+01, 8.2500010e+00,
               1.8250002e+01, 1.5312500e+01, 2.6062504e+01, 3.3562504e+01, 2.3906254e+01, 3.6250004e+01, 4.6250000e+01,
               3.2812500e+01, 3.8250000e+01, 4.8250004e+01, 3.4062500e+01, -1.4901161e-08, 0.0000000e+00, 1.6666667e+00,
               1.5000001e+00],
              [8.2500010e+00, 1.5750001e+01, 0.0000000e+00, 1.2500000e+01, 2.2500000e+01, 0.0000000e+00, 1.4500000e+01,
               2.4500000e+01, 0.0000000e+00, 3.0750002e+01, 3.8250004e+01, 0.0000000e+00, 4.2500000e+01, 5.2500000e+01,
               0.0000000e+00, 4.4500000e+01, 5.4500000e+01, 0.0000000e+00, 2.9802322e-08, 2.4999993e-01, 1.6666665e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 2.1666667e+00, 1.2166666e+01, 0.0000000e+00, 4.1666670e+00, 1.4166667e+01, 0.0000000e+00,
               6.1666670e+00, 1.6166666e+01, 0.0000000e+00, 3.2166664e+01, 4.2166664e+01, 0.0000000e+00, 3.4166668e+01,
               4.4166664e+01, 0.0000000e+00, 3.6166668e+01, 4.6166664e+01, -2.9802322e-08, -2.4999994e-01,
               1.6666667e+00, 1.5000000e+00],
              [1.3541669e+00, 8.4166670e+00, 1.8416666e+01, 2.6041667e+00, 1.0416667e+01, 2.0416668e+01, 3.8541667e+00,
               1.2416667e+01, 2.2416666e+01, 2.0104166e+01, 3.8416664e+01, 4.8416664e+01, 2.1354168e+01, 4.0416668e+01,
               5.0416664e+01, 2.2604168e+01, 4.2416664e+01, 5.2416668e+01, 0.0000000e+00, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [5.9166670e+00, 1.5916666e+01, 1.3854166e+01, 7.9166665e+00, 1.7916668e+01, 1.5104166e+01, 9.9166660e+00,
               1.9916668e+01, 1.6354168e+01, 3.5916664e+01, 4.5916664e+01, 3.2604164e+01, 3.7916664e+01, 4.7916664e+01,
               3.3854168e+01, 3.9916668e+01, 4.9916664e+01, 3.5104168e+01, 1.4901161e-08, 0.0000000e+00, 1.6666666e+00,
               1.5000000e+00],
              [1.2166666e+01, 2.2166666e+01, 0.0000000e+00, 1.4166667e+01, 2.4166666e+01, 0.0000000e+00, 1.6166666e+01,
               2.6166666e+01, 0.0000000e+00, 4.2166664e+01, 5.2166664e+01, 0.0000000e+00, 4.4166664e+01, 5.4166664e+01,
               0.0000000e+00, 4.6166664e+01, 5.6166664e+01, 0.0000000e+00, -2.9802322e-08, 2.4999994e-01, 1.6666667e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 3.8333335e+00, 1.3833333e+01, 0.0000000e+00, 5.8333335e+00, 1.5833334e+01, 0.0000000e+00,
               7.8333330e+00, 1.7833334e+01, 0.0000000e+00, 3.3833336e+01, 4.3833332e+01, 0.0000000e+00, 3.5833332e+01,
               4.5833336e+01, 0.0000000e+00, 3.7833332e+01, 4.7833336e+01, 0.0000000e+00, -2.4999996e-01, 1.6666667e+00,
               1.5000000e+00],
              [2.3958333e+00, 1.0083333e+01, 2.0083334e+01, 3.6458335e+00, 1.2083333e+01, 2.2083334e+01, 4.8958335e+00,
               1.4083334e+01, 2.4083332e+01, 2.1145832e+01, 4.0083336e+01, 5.0083336e+01, 2.2395832e+01, 4.2083332e+01,
               5.2083332e+01, 2.3645834e+01, 4.4083336e+01, 5.4083332e+01, 2.9802322e-08, -2.9802322e-08, 1.6666667e+00,
               1.5000000e+00],
              [7.5833340e+00, 1.7583334e+01, 1.4895835e+01, 9.5833340e+00, 1.9583334e+01, 1.6145834e+01, 1.1583334e+01,
               2.1583336e+01, 1.7395836e+01, 3.7583336e+01, 4.7583336e+01, 3.3645836e+01, 3.9583336e+01, 4.9583336e+01,
               3.4895836e+01, 4.1583336e+01, 5.1583336e+01, 3.6145836e+01, 4.4703484e-08, 0.0000000e+00, 1.6666669e+00,
               1.5000001e+00],
              [1.3833333e+01, 2.3833334e+01, 0.0000000e+00, 1.5833334e+01, 2.5833334e+01, 0.0000000e+00, 1.7833334e+01,
               2.7833332e+01, 0.0000000e+00, 4.3833332e+01, 5.3833336e+01, 0.0000000e+00, 4.5833336e+01, 5.5833332e+01,
               0.0000000e+00, 4.7833336e+01, 5.7833336e+01, 0.0000000e+00, 0.0000000e+00, 2.4999996e-01, 1.6666667e+00,
               1.5000000e+00]],
             [[0.0000000e+00, 5.5000000e+00, 1.5499998e+01, 0.0000000e+00, 7.4999990e+00, 1.7499998e+01, 0.0000000e+00,
               6.7499990e+00, 1.4249998e+01, 0.0000000e+00, 3.5499996e+01, 4.5499996e+01, 0.0000000e+00, 3.7499996e+01,
               4.7499996e+01, 0.0000000e+00, 2.9249996e+01, 3.6749992e+01, 0.0000000e+00, -2.4999993e-01, 1.6666666e+00,
               1.4999998e+00],
              [3.4375000e+00, 1.1750000e+01, 2.1750000e+01, 4.6875000e+00, 1.3750000e+01, 2.3750000e+01, 4.2187495e+00,
               1.1437499e+01, 1.8937498e+01, 2.2187500e+01, 4.1750000e+01, 5.1750000e+01, 2.3437500e+01, 4.3750000e+01,
               5.3750000e+01, 1.8281248e+01, 3.3937496e+01, 4.1437496e+01, 1.4901161e-08, 7.4505806e-09, 1.6666667e+00,
               1.5000000e+00],
              [9.2500000e+00, 1.9249998e+01, 1.5937500e+01, 1.1250000e+01, 2.1250000e+01, 1.7187500e+01, 9.5624990e+00,
               1.7062498e+01, 1.3593749e+01, 3.9249996e+01, 4.9250000e+01, 3.4687500e+01, 4.1250000e+01, 5.1250000e+01,
               3.5937500e+01, 3.2062496e+01, 3.9562496e+01, 2.7656248e+01, 1.4901161e-08, -7.4505806e-09, 1.6666667e+00,
               1.5000000e+00],
              [1.5499998e+01, 2.5499996e+01, 0.0000000e+00, 1.7499998e+01, 2.7499996e+01, 0.0000000e+00, 1.4249998e+01,
               2.1749996e+01, 0.0000000e+00, 4.5499996e+01, 5.5499992e+01, 0.0000000e+00, 4.7499996e+01, 5.7499992e+01,
               0.0000000e+00, 3.6749992e+01, 4.4249992e+01, 0.0000000e+00, 0.0000000e+00, 2.4999993e-01, 1.6666666e+00,
               1.4999998e+00]],
             [[0.0000000e+00, 7.0000000e+00, 1.7000000e+01, 0.0000000e+00, 9.0000000e+00, 1.9000000e+01, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 3.7000000e+01, 4.7000000e+01, 0.0000000e+00, 3.9000000e+01,
               4.9000000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, -2.4999994e-01, 1.6666667e+00,
               1.5000000e+00],
              [4.3750000e+00, 1.3250000e+01, 2.3250000e+01, 5.6250000e+00, 1.5250000e+01, 2.5250000e+01, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 2.3125000e+01, 4.3250000e+01, 5.3250000e+01, 2.4375000e+01, 4.5250000e+01,
               5.5250000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [1.0750000e+01, 2.0750000e+01, 1.6875000e+01, 1.2750000e+01, 2.2750000e+01, 1.8125000e+01, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 4.0750000e+01, 5.0750000e+01, 3.5625000e+01, 4.2750000e+01, 5.2750000e+01,
               3.6875000e+01, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, 0.0000000e+00, 1.6666667e+00,
               1.5000000e+00],
              [1.7000000e+01, 2.7000000e+01, 0.0000000e+00, 1.9000000e+01, 2.9000000e+01, 0.0000000e+00, 0.0000000e+00,
               0.0000000e+00, 0.0000000e+00, 4.7000000e+01, 5.7000000e+01, 0.0000000e+00, 4.9000000e+01, 5.9000000e+01,
               0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.6666710e-01, 2.4999994e-01, 1.6666667e+00,
               1.5000000e+00]]]
        ], 'float32')

        # Channel order in torch.nn.functional.unfold id different from tf.image.extract_patches
        expected = np.concatenate([
            np.concatenate([
                expected[:1, ..., :-4].reshape([1, 6, 4, 2, 9]).transpose(0, 1, 2, 4, 3).reshape([1, 6, 4, 18]),
                expected[:1, ..., -4:]
            ], axis=-1),
            np.concatenate([
                expected[1:, ..., :-4].reshape([1, 6, 4, 2, 9]).transpose(0, 1, 2, 4, 3).reshape([1, 6, 4, 18]),
                expected[1:, ..., -4:]
            ], axis=-1)
        ], axis=0)

        result = query_features(features, coords, tf.identity, cells=cells, feat_unfold=True, local_ensemble=True)
        result = self.evaluate(result)

        self.assertAllClose(expected, result)


if __name__ == '__main__':
    tf.test.main()
